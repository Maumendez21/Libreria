@inject NavigationManager navigation
@using OfficeOpenXml;
@using OfficeOpenXml.Style;
@using System.IO;
@using iText.Kernel.Pdf;
@using iText.Pdfa;
@using iText.Layout;
@using iText.Layout.Element;
@using Syncfusion.DocIO;
@using Syncfusion.DocIO.DLS; 
@inject IJSRuntime jsruntime;


@if (lista == null)
{
    <h1 class="alert alert-success">Cargando...</h1>
}
else
{

    <div>
        @if (permitAdd)
        {


            <NavLink href="@rutaAgregar">
                <button class="btn btn-primary">Agregar</button>
            </NavLink>


        }
        @if (permitirWord)
        {
            <a @onclick="exportarWord" class="btn btn-success" href="@word" >Exportar Word</a>
        }
        @if (permitirReporteExcel)
        {
            <a @onclick="exportarExcel" class="btn btn-secondary" href="@excel" >Exportar Excel</a>
        }
        @if (permitirReportePdf)
        {
            <button class="btn btn-info" @onclick="exportarPdf">PDF</button>
        }
    </div>

    @if (type != "none")
    {
        <label class="mr-4 ml-4">@label</label>
        @if (type == "text")
        {


            @if (button == true)
            {

                <div class="mr-4 ml-4 mb-4" style="display:grid;grid-template-columns:8fr 1fr">
                    <input type="text" class="form-control form-check mr-2" @bind-value="valor" @bind-value:event="oninput" />
                    <button @onclick="busqueda" class="btn btn-primary">Buscar</button>
                </div>
            }
            else
            {
                <div class="mr-4 ml-4 mb-4">
                    <input type="text" @onkeyup="busqueda" class="form-control form-check mr-2" @bind-value="valor" @bind-value:event="oninput" />
                </div>
            }

        }
        else if (type == "combobox")
        {
            if (button)
            {

                <div class="mr-4 ml-4 mb-4" style="display:grid;grid-template-columns:8fr 1fr">
                    <select @bind-value="valor" class="form form-control" @bind-value:event="oninput">
                        <option value="">--Seleccione--</option>
                        @foreach (var item in combobox)
                        {
                            <option value="@item.GetType().GetProperty(valueMember).GetValue(item)">
                                @item.GetType().GetProperty(displayMember).GetValue(item)
                            </option>
                        }
                    </select>

                    <button class="btn btn-primary" @onclick="busqueda">Buscar</button>
                </div>
            }
            else
            {
                <div class="mr-4 ml-4 mb-4" style="display:grid;grid-template-columns:8fr 1fr">
                    <select @bind-value="valor" class="form form-control" @bind-value:event="oninput" @onchange="busqueda">
                        <option value="">--Seleccione--</option>
                        @foreach (var item in combobox)
                        {
                            <option value="@item.GetType().GetProperty(valueMember).GetValue(item)">
                                @item.GetType().GetProperty(displayMember).GetValue(item)
                            </option>
                        }
                    </select>
                </div>
            }
        }
    }

<div class="dataTables_wrapper mb-5">

    <div class="dataTables_length" id="example_length">
        <label>
            Show <select name="example_length" aria-controls="example" class=""
        @bind-value="numeroRegPag" @bind-value:event="oninput" @onchange="cambiarNumReg">
                <option value="3">3</option>
                <option value="5">5</option>
                <option value="8">8</option>
                <option value="10">10</option>
                <option value="25">25</option>
                <option value="50">50</option>
                <option value="100">100</option>
            </select> entries
        </label>

    </div>

    <table class="table table-striped dataTable no-footer">
        <thead>
            <tr role="row">
                @foreach (string item in cabeceras)
                {
                    <td>@item</td>
                }
                @if (permitDelete == true || permitUpdate == true)
                {
                    <td>Operaciónes</td>
                }
            </tr>
        </thead>
        <tbody>

            @{
                List<object> listaReturn = new List<object>();
                int indiceValor = 0;

                // Cuando se da click al botón
                if (indiceVal > 1)
                {
                    indiceValor = indiceVal;
                }
                else
                {
                    // indice 1 (pos 0 a 9)
                    indiceValor = 1;
                }

                int inicio = indiceValor * numeroRegPag - numeroRegPag;
                int fin = indiceValor * numeroRegPag;

                @for (int i = inicio; i < fin; i++)
                {
                    if (i < lista.Length)
                    {

                        listaReturn.Add(lista[i]);
                    }
                }

            }

            @foreach (object item in listaReturn)
            {
                <tr role="row" class="odd">
                    @foreach (var prop in item.GetType().GetProperties())
                    {
                        <td>@prop.GetValue(item)</td>
                    }
                    @if (permitDelete == true || permitUpdate == true)
                    {
                        <td>
                            @if (permitUpdate)
                            {

                                <button class="btn btn-success btn-sm fa fa-edit" @onclick="@(() => Editar(@item.GetType().GetProperties()[0].GetValue(@item).ToString()))">
                                </button>

                            }
                            @if (permitDelete)
                            {
                                <button class="btn btn-danger btn-sm fa fa-trash"
                                        data-bs-toggle="modal" data-bs-target="#exampleModal" @onclick="@(() => Eliminar(@item.GetType().GetProperties()[0].GetValue(@item).ToString()))">
                                </button>

                                <MensajeConfirmacion id="@valorEliminar"
                                                     eventDelete="EliminarDatos" />

                            }
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
    @{
        int inicioPaginado = inicio + 1;
        int finpaginado = inicioPaginado + numeroRegPag - 1;
        if (finpaginado > lista.Length)
        {
            finpaginado = lista.Length;
        }
    }
    <div class="dataTables_info" id="example_info" role="status" aria-live="polite">Showing @inicioPaginado to @finpaginado of @lista.Length entries</div>


    <div class="dataTables_paginate paging_simple_numbers">
        <span>

            @for (int i = 1; i <= numeroPaginas(); i++)
            {
                int data = i;
                <button class="paginate_button "
                        aria-controls="example"
                        data-dt-idx="1"
                        tabindex="0" @onclick="@(e => Paginar(data))">
                    @i
                </button>
            }
        </span>
    </div>
</div>
}


@code {


    public string excel = "";
    public string word = "";
    public string valor { get; set; }
    public string valorEliminar { get; set; }

    [Parameter]
    public EventCallback<string> eventBusqueda { get; set; }

    [Parameter]
    public EventCallback<string> eventUpdate { get; set; }

    [Parameter]
    public EventCallback<string> eventDelete { get; set; }

    public int numeroRegPag { get; set; } = 10;

    [Parameter]
    public string[] cabeceras { get; set; }

    [Parameter]
    public string rutaAgregar { get; set; } = "";

    [Parameter]
    public string rutaEditar { get; set; } = "";

    [Parameter]
    public object[] lista { get; set; }


    // Manda toda la tabla
    [Parameter]
    public string type { get; set; } = "none";

    // Solo diez Registros
    public List<object> listaReturn { get; set; }

    public int indiceVal { get; set; }

    [Parameter]
    public string label { get; set; } = "";

    [Parameter]
    public bool button { get; set; } = true;

    [Parameter]
    public bool permitAdd { get; set; } = false;

    [Parameter]
    public string[] nombrePropiedadesaMostrar { get; set; }

    [Parameter]
    public bool permitUpdate { get; set; } = false;

    [Parameter]
    public bool permitDelete { get; set; } = false;

    [Parameter]
    public bool permitirReporteExcel { get; set; } = false;
    [Parameter]
    public bool permitirReportePdf { get; set; } = false;
    [Parameter]
    public bool permitirWord { get; set; } = false;




    [Parameter]
    public object[] combobox { get; set; } = null;
    [Parameter]
    public string displayMember { get; set; } = null;
    [Parameter]
    public string valueMember { get; set; } = null;


    public void busqueda()
    {
        eventBusqueda.InvokeAsync(valor);
    }

    public void exportarWord()
    {
        using (MemoryStream ms = new MemoryStream())
        {
            WordDocument document = new WordDocument();
            WSection section = document.AddSection() as WSection;

            section.PageSetup.Margins.All = 72;

            IWParagraph paragraph = section.AddParagraph();
            paragraph.ApplyStyle("Normal");
            paragraph.ParagraphFormat.HorizontalAlignment = HorizontalAlignment.Center;
            WTextRange textRange = paragraph.AppendText(tituloPdf) as WTextRange;

            textRange.CharacterFormat.FontSize = 20f;
            textRange.CharacterFormat.FontName = "Arial";
            textRange.CharacterFormat.TextColor = Syncfusion.Drawing.Color.Blue;

            //crear una tabla 
            IWTable wTable = section.AddTable();
            int numeroCabeceras = cabeceras.Length;
            int numeroFilas = lista.Length;
            wTable.ResetCells(numeroFilas+1, numeroCabeceras);

            for (int i = 0; i < numeroCabeceras; i++)
            {
                wTable[0, i].AddParagraph().AppendText(cabeceras[i]);
            }
            int fila = 1;
            int col = 0;
            foreach (object item in lista)
            {
                col = 0;
                foreach (string prop in nombrePropiedadesaMostrar)
                {
                    wTable[fila, col].AddParagraph().AppendText(
                            item.GetType().GetProperty(prop).GetValue(item).ToString()
                        ); ;
                    col++;
                }
                fila++;
            }

            document.Save(ms, FormatType.Docx);

            byte[] buffer = ms.ToArray();
            string base64 = Convert.ToBase64String(buffer);

            word = "data:application/vnd.openxmlformats-officedocument.wordprocessingml.document;base64," + base64;

        }
    }

    public void exportarExcel()
    {
        using (MemoryStream ms = new MemoryStream())
        {
            using (ExcelPackage ep = new ExcelPackage())
            {
                ep.Workbook.Worksheets.Add("Hola");
                ExcelWorksheet ew = ep.Workbook.Worksheets[0];
                for (int i = 0; i < cabeceras.Length; i++)
                {
                    ew.Column(i + 1).Width = 50;
                    ew.Cells[1, i + 1].Value = cabeceras[i];
                }

                // Inicializando los valores
                int fila = 2;
                int col = 1;

                //Se recorre la tabla
                foreach (object item in lista)
                {
                    col = 1;
                    foreach (string prop in nombrePropiedadesaMostrar)
                    {
                        ew.Cells[fila, col].Value = item.GetType().GetProperty(prop).GetValue(item).ToString();
                        col++;
                    }
                    fila++;
                }


                // Esto es para descargarlo
                ep.SaveAs(ms);
                byte[] buffer = ms.ToArray();
                string base64 = Convert.ToBase64String(buffer);
                excel = "data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64," + base64;

            }
        }
    }

    [Parameter]
    public string tituloPdf { get; set; }
    public string pdf { get; set; }
    public void exportarPdf()
    {
        using (MemoryStream ms = new MemoryStream())
        {
            PdfWriter writer = new PdfWriter(ms);
            using (var pdfDoc = new PdfDocument(writer))
            {
                // creación de documento
                Document doc = new Document(pdfDoc);
                Paragraph p1 = new Paragraph(tituloPdf);
                p1.SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER);
                p1.SetFontSize(20);
                doc.Add(p1);
                Table table = new Table(cabeceras.Length);
                Cell celda;
                for (int i = 0; i < cabeceras.Length; i++)
                {
                    celda = new Cell();
                    celda.Add(new Paragraph(cabeceras[i]));
                    table.AddHeaderCell(celda);
                }
                foreach (object item in lista)
                {
                    foreach (string prop in nombrePropiedadesaMostrar)
                    {
                        celda = new Cell();
                        celda.Add(
                                new Paragraph(item.GetType().GetProperty(prop).GetValue(item).ToString())
                                );
                        table.AddCell(celda);
                    }
                }
                doc.Add(table);
                // Cerrado del documento
                doc.Close();
                writer.Close();
                // Esto es para descargar
                byte[] buffer = ms.ToArray();
                string base64 = Convert.ToBase64String(buffer);
                pdf = "data:application/pdf;base64," + base64;
                jsruntime.InvokeVoidAsync("descargaPDF", pdf);

            }
        }
    }

    public void cambiarNumReg(ChangeEventArgs e)
    {
        int valorCambiado = int.Parse(e.Value.ToString());
        numeroRegPag = valorCambiado;
    }

    public void Editar(string data)
    {
        navigation.NavigateTo(rutaEditar + "/" + data);
        eventUpdate.InvokeAsync(data);
    }

    public void Eliminar(string data)
    {
        valorEliminar = data;
    }

    public void EliminarDatos(string data)
    {
        eventDelete.InvokeAsync(data);
    }

    public void Paginar(int inidice)
    {
        indiceVal = inidice;
    }

    public int numeroPaginas()
    {

        //12 registros

        int numeroBotones;
        int numeroRegistro = lista.Length;


        if (numeroRegistro % numeroRegPag == 0)
        {
            numeroBotones = (numeroRegistro / numeroRegPag);
        }
        else
        {

            numeroBotones = (numeroRegistro / numeroRegPag) + 1;
        }

        return numeroBotones;


    }
}


